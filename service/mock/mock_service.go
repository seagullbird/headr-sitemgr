// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/seagullbird/headr-sitemgr/service (interfaces: Service)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockService is a mock of Service interface
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// CheckSitenameExists mocks base method
func (m *MockService) CheckSitenameExists(arg0 context.Context, arg1 string) (bool, error) {
	ret := m.ctrl.Call(m, "CheckSitenameExists", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckSitenameExists indicates an expected call of CheckSitenameExists
func (mr *MockServiceMockRecorder) CheckSitenameExists(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckSitenameExists", reflect.TypeOf((*MockService)(nil).CheckSitenameExists), arg0, arg1)
}

// DeleteSite mocks base method
func (m *MockService) DeleteSite(arg0 context.Context, arg1 uint) error {
	ret := m.ctrl.Call(m, "DeleteSite", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSite indicates an expected call of DeleteSite
func (mr *MockServiceMockRecorder) DeleteSite(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSite", reflect.TypeOf((*MockService)(nil).DeleteSite), arg0, arg1)
}

// GetConfig mocks base method
func (m *MockService) GetConfig(arg0 context.Context, arg1 uint) (string, error) {
	ret := m.ctrl.Call(m, "GetConfig", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConfig indicates an expected call of GetConfig
func (mr *MockServiceMockRecorder) GetConfig(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfig", reflect.TypeOf((*MockService)(nil).GetConfig), arg0, arg1)
}

// GetSiteIDByUserID mocks base method
func (m *MockService) GetSiteIDByUserID(arg0 context.Context) (uint, error) {
	ret := m.ctrl.Call(m, "GetSiteIDByUserID", arg0)
	ret0, _ := ret[0].(uint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSiteIDByUserID indicates an expected call of GetSiteIDByUserID
func (mr *MockServiceMockRecorder) GetSiteIDByUserID(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSiteIDByUserID", reflect.TypeOf((*MockService)(nil).GetSiteIDByUserID), arg0)
}

// GetThemes mocks base method
func (m *MockService) GetThemes(arg0 context.Context, arg1 uint) (string, error) {
	ret := m.ctrl.Call(m, "GetThemes", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetThemes indicates an expected call of GetThemes
func (mr *MockServiceMockRecorder) GetThemes(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetThemes", reflect.TypeOf((*MockService)(nil).GetThemes), arg0, arg1)
}

// NewSite mocks base method
func (m *MockService) NewSite(arg0 context.Context, arg1 string) (uint, error) {
	ret := m.ctrl.Call(m, "NewSite", arg0, arg1)
	ret0, _ := ret[0].(uint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewSite indicates an expected call of NewSite
func (mr *MockServiceMockRecorder) NewSite(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewSite", reflect.TypeOf((*MockService)(nil).NewSite), arg0, arg1)
}

// PostAbout mocks base method
func (m *MockService) PostAbout(arg0 context.Context, arg1 uint, arg2 string) error {
	ret := m.ctrl.Call(m, "PostAbout", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// PostAbout indicates an expected call of PostAbout
func (mr *MockServiceMockRecorder) PostAbout(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostAbout", reflect.TypeOf((*MockService)(nil).PostAbout), arg0, arg1, arg2)
}

// UpdateConfig mocks base method
func (m *MockService) UpdateConfig(arg0 context.Context, arg1 uint, arg2 string) error {
	ret := m.ctrl.Call(m, "UpdateConfig", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateConfig indicates an expected call of UpdateConfig
func (mr *MockServiceMockRecorder) UpdateConfig(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateConfig", reflect.TypeOf((*MockService)(nil).UpdateConfig), arg0, arg1, arg2)
}

// UpdateSiteTheme mocks base method
func (m *MockService) UpdateSiteTheme(arg0 context.Context, arg1 uint, arg2 string) error {
	ret := m.ctrl.Call(m, "UpdateSiteTheme", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSiteTheme indicates an expected call of UpdateSiteTheme
func (mr *MockServiceMockRecorder) UpdateSiteTheme(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSiteTheme", reflect.TypeOf((*MockService)(nil).UpdateSiteTheme), arg0, arg1, arg2)
}
