// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/seagullbird/headr-common/mq/receive (interfaces: Receiver)

// Package mock is a generated GoMock package.
package mock

import (
	gomock "github.com/golang/mock/gomock"
	receive "github.com/seagullbird/headr-common/mq/receive"
	reflect "reflect"
)

// MockReceiver is a mock of Receiver interface
type MockReceiver struct {
	ctrl     *gomock.Controller
	recorder *MockReceiverMockRecorder
}

// MockReceiverMockRecorder is the mock recorder for MockReceiver
type MockReceiverMockRecorder struct {
	mock *MockReceiver
}

// NewMockReceiver creates a new mock instance
func NewMockReceiver(ctrl *gomock.Controller) *MockReceiver {
	mock := &MockReceiver{ctrl: ctrl}
	mock.recorder = &MockReceiverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockReceiver) EXPECT() *MockReceiverMockRecorder {
	return m.recorder
}

// RegisterListener mocks base method
func (m *MockReceiver) RegisterListener(arg0 string, arg1 receive.Listener) error {
	ret := m.ctrl.Call(m, "RegisterListener", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterListener indicates an expected call of RegisterListener
func (mr *MockReceiverMockRecorder) RegisterListener(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterListener", reflect.TypeOf((*MockReceiver)(nil).RegisterListener), arg0, arg1)
}
