// Code generated by protoc-gen-go. DO NOT EDIT.
// source: sitemgrsvc.proto

/*
Package pb is a generated protocol buffer package.

It is generated from these files:
	sitemgrsvc.proto

It has these top-level messages:
	CreateNewSiteRequest
	CreateNewSiteReply
	ProxyDeleteSiteRequest
	ProxyDeleteSiteReply
	CheckSitenameExistsRequest
	CheckSitenameExistsReply
	GetSiteIDByUserIDRequest
	GetSiteIDByUserIDReply
	GetConfigRequest
	GetConfigReply
	UpdateConfigRequest
	UpdateConfigReply
	GetThemesRequest
	GetThemesReply
	UpdateSiteThemeRequest
	UpdateSiteThemeReply
	PostAboutRequest
	PostAboutReply
	GetAboutRequest
	GetAboutReply
*/
package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type CreateNewSiteRequest struct {
	Sitename string `protobuf:"bytes,1,opt,name=sitename" json:"sitename,omitempty"`
}

func (m *CreateNewSiteRequest) Reset()                    { *m = CreateNewSiteRequest{} }
func (m *CreateNewSiteRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateNewSiteRequest) ProtoMessage()               {}
func (*CreateNewSiteRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *CreateNewSiteRequest) GetSitename() string {
	if m != nil {
		return m.Sitename
	}
	return ""
}

type CreateNewSiteReply struct {
	SiteId uint64 `protobuf:"varint,1,opt,name=site_id,json=siteId" json:"site_id,omitempty"`
	Err    string `protobuf:"bytes,2,opt,name=err" json:"err,omitempty"`
}

func (m *CreateNewSiteReply) Reset()                    { *m = CreateNewSiteReply{} }
func (m *CreateNewSiteReply) String() string            { return proto.CompactTextString(m) }
func (*CreateNewSiteReply) ProtoMessage()               {}
func (*CreateNewSiteReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *CreateNewSiteReply) GetSiteId() uint64 {
	if m != nil {
		return m.SiteId
	}
	return 0
}

func (m *CreateNewSiteReply) GetErr() string {
	if m != nil {
		return m.Err
	}
	return ""
}

type ProxyDeleteSiteRequest struct {
	SiteId uint64 `protobuf:"varint,1,opt,name=site_id,json=siteId" json:"site_id,omitempty"`
}

func (m *ProxyDeleteSiteRequest) Reset()                    { *m = ProxyDeleteSiteRequest{} }
func (m *ProxyDeleteSiteRequest) String() string            { return proto.CompactTextString(m) }
func (*ProxyDeleteSiteRequest) ProtoMessage()               {}
func (*ProxyDeleteSiteRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ProxyDeleteSiteRequest) GetSiteId() uint64 {
	if m != nil {
		return m.SiteId
	}
	return 0
}

type ProxyDeleteSiteReply struct {
	Err string `protobuf:"bytes,1,opt,name=err" json:"err,omitempty"`
}

func (m *ProxyDeleteSiteReply) Reset()                    { *m = ProxyDeleteSiteReply{} }
func (m *ProxyDeleteSiteReply) String() string            { return proto.CompactTextString(m) }
func (*ProxyDeleteSiteReply) ProtoMessage()               {}
func (*ProxyDeleteSiteReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *ProxyDeleteSiteReply) GetErr() string {
	if m != nil {
		return m.Err
	}
	return ""
}

type CheckSitenameExistsRequest struct {
	Sitename string `protobuf:"bytes,1,opt,name=sitename" json:"sitename,omitempty"`
}

func (m *CheckSitenameExistsRequest) Reset()                    { *m = CheckSitenameExistsRequest{} }
func (m *CheckSitenameExistsRequest) String() string            { return proto.CompactTextString(m) }
func (*CheckSitenameExistsRequest) ProtoMessage()               {}
func (*CheckSitenameExistsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *CheckSitenameExistsRequest) GetSitename() string {
	if m != nil {
		return m.Sitename
	}
	return ""
}

type CheckSitenameExistsReply struct {
	Exists bool   `protobuf:"varint,1,opt,name=exists" json:"exists,omitempty"`
	Err    string `protobuf:"bytes,2,opt,name=err" json:"err,omitempty"`
}

func (m *CheckSitenameExistsReply) Reset()                    { *m = CheckSitenameExistsReply{} }
func (m *CheckSitenameExistsReply) String() string            { return proto.CompactTextString(m) }
func (*CheckSitenameExistsReply) ProtoMessage()               {}
func (*CheckSitenameExistsReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *CheckSitenameExistsReply) GetExists() bool {
	if m != nil {
		return m.Exists
	}
	return false
}

func (m *CheckSitenameExistsReply) GetErr() string {
	if m != nil {
		return m.Err
	}
	return ""
}

type GetSiteIDByUserIDRequest struct {
}

func (m *GetSiteIDByUserIDRequest) Reset()                    { *m = GetSiteIDByUserIDRequest{} }
func (m *GetSiteIDByUserIDRequest) String() string            { return proto.CompactTextString(m) }
func (*GetSiteIDByUserIDRequest) ProtoMessage()               {}
func (*GetSiteIDByUserIDRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

type GetSiteIDByUserIDReply struct {
	SiteId uint64 `protobuf:"varint,1,opt,name=site_id,json=siteId" json:"site_id,omitempty"`
	Err    string `protobuf:"bytes,2,opt,name=err" json:"err,omitempty"`
}

func (m *GetSiteIDByUserIDReply) Reset()                    { *m = GetSiteIDByUserIDReply{} }
func (m *GetSiteIDByUserIDReply) String() string            { return proto.CompactTextString(m) }
func (*GetSiteIDByUserIDReply) ProtoMessage()               {}
func (*GetSiteIDByUserIDReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *GetSiteIDByUserIDReply) GetSiteId() uint64 {
	if m != nil {
		return m.SiteId
	}
	return 0
}

func (m *GetSiteIDByUserIDReply) GetErr() string {
	if m != nil {
		return m.Err
	}
	return ""
}

type GetConfigRequest struct {
	SiteId uint64 `protobuf:"varint,1,opt,name=site_id,json=siteId" json:"site_id,omitempty"`
}

func (m *GetConfigRequest) Reset()                    { *m = GetConfigRequest{} }
func (m *GetConfigRequest) String() string            { return proto.CompactTextString(m) }
func (*GetConfigRequest) ProtoMessage()               {}
func (*GetConfigRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *GetConfigRequest) GetSiteId() uint64 {
	if m != nil {
		return m.SiteId
	}
	return 0
}

type GetConfigReply struct {
	Config string `protobuf:"bytes,1,opt,name=config" json:"config,omitempty"`
	Err    string `protobuf:"bytes,2,opt,name=err" json:"err,omitempty"`
}

func (m *GetConfigReply) Reset()                    { *m = GetConfigReply{} }
func (m *GetConfigReply) String() string            { return proto.CompactTextString(m) }
func (*GetConfigReply) ProtoMessage()               {}
func (*GetConfigReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *GetConfigReply) GetConfig() string {
	if m != nil {
		return m.Config
	}
	return ""
}

func (m *GetConfigReply) GetErr() string {
	if m != nil {
		return m.Err
	}
	return ""
}

type UpdateConfigRequest struct {
	SiteId uint64 `protobuf:"varint,1,opt,name=site_id,json=siteId" json:"site_id,omitempty"`
	Config string `protobuf:"bytes,2,opt,name=config" json:"config,omitempty"`
}

func (m *UpdateConfigRequest) Reset()                    { *m = UpdateConfigRequest{} }
func (m *UpdateConfigRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateConfigRequest) ProtoMessage()               {}
func (*UpdateConfigRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *UpdateConfigRequest) GetSiteId() uint64 {
	if m != nil {
		return m.SiteId
	}
	return 0
}

func (m *UpdateConfigRequest) GetConfig() string {
	if m != nil {
		return m.Config
	}
	return ""
}

type UpdateConfigReply struct {
	Err string `protobuf:"bytes,1,opt,name=err" json:"err,omitempty"`
}

func (m *UpdateConfigReply) Reset()                    { *m = UpdateConfigReply{} }
func (m *UpdateConfigReply) String() string            { return proto.CompactTextString(m) }
func (*UpdateConfigReply) ProtoMessage()               {}
func (*UpdateConfigReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *UpdateConfigReply) GetErr() string {
	if m != nil {
		return m.Err
	}
	return ""
}

type GetThemesRequest struct {
	SiteId uint64 `protobuf:"varint,1,opt,name=site_id,json=siteId" json:"site_id,omitempty"`
}

func (m *GetThemesRequest) Reset()                    { *m = GetThemesRequest{} }
func (m *GetThemesRequest) String() string            { return proto.CompactTextString(m) }
func (*GetThemesRequest) ProtoMessage()               {}
func (*GetThemesRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *GetThemesRequest) GetSiteId() uint64 {
	if m != nil {
		return m.SiteId
	}
	return 0
}

type GetThemesReply struct {
	Themes string `protobuf:"bytes,1,opt,name=themes" json:"themes,omitempty"`
	Err    string `protobuf:"bytes,2,opt,name=err" json:"err,omitempty"`
}

func (m *GetThemesReply) Reset()                    { *m = GetThemesReply{} }
func (m *GetThemesReply) String() string            { return proto.CompactTextString(m) }
func (*GetThemesReply) ProtoMessage()               {}
func (*GetThemesReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *GetThemesReply) GetThemes() string {
	if m != nil {
		return m.Themes
	}
	return ""
}

func (m *GetThemesReply) GetErr() string {
	if m != nil {
		return m.Err
	}
	return ""
}

type UpdateSiteThemeRequest struct {
	SiteId uint64 `protobuf:"varint,1,opt,name=site_id,json=siteId" json:"site_id,omitempty"`
	Theme  string `protobuf:"bytes,2,opt,name=theme" json:"theme,omitempty"`
}

func (m *UpdateSiteThemeRequest) Reset()                    { *m = UpdateSiteThemeRequest{} }
func (m *UpdateSiteThemeRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateSiteThemeRequest) ProtoMessage()               {}
func (*UpdateSiteThemeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *UpdateSiteThemeRequest) GetSiteId() uint64 {
	if m != nil {
		return m.SiteId
	}
	return 0
}

func (m *UpdateSiteThemeRequest) GetTheme() string {
	if m != nil {
		return m.Theme
	}
	return ""
}

type UpdateSiteThemeReply struct {
	Err string `protobuf:"bytes,1,opt,name=err" json:"err,omitempty"`
}

func (m *UpdateSiteThemeReply) Reset()                    { *m = UpdateSiteThemeReply{} }
func (m *UpdateSiteThemeReply) String() string            { return proto.CompactTextString(m) }
func (*UpdateSiteThemeReply) ProtoMessage()               {}
func (*UpdateSiteThemeReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *UpdateSiteThemeReply) GetErr() string {
	if m != nil {
		return m.Err
	}
	return ""
}

type PostAboutRequest struct {
	SiteId  uint64 `protobuf:"varint,1,opt,name=site_id,json=siteId" json:"site_id,omitempty"`
	Content string `protobuf:"bytes,2,opt,name=content" json:"content,omitempty"`
}

func (m *PostAboutRequest) Reset()                    { *m = PostAboutRequest{} }
func (m *PostAboutRequest) String() string            { return proto.CompactTextString(m) }
func (*PostAboutRequest) ProtoMessage()               {}
func (*PostAboutRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *PostAboutRequest) GetSiteId() uint64 {
	if m != nil {
		return m.SiteId
	}
	return 0
}

func (m *PostAboutRequest) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

type PostAboutReply struct {
	Err string `protobuf:"bytes,1,opt,name=err" json:"err,omitempty"`
}

func (m *PostAboutReply) Reset()                    { *m = PostAboutReply{} }
func (m *PostAboutReply) String() string            { return proto.CompactTextString(m) }
func (*PostAboutReply) ProtoMessage()               {}
func (*PostAboutReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *PostAboutReply) GetErr() string {
	if m != nil {
		return m.Err
	}
	return ""
}

type GetAboutRequest struct {
	SiteId uint64 `protobuf:"varint,1,opt,name=site_id,json=siteId" json:"site_id,omitempty"`
}

func (m *GetAboutRequest) Reset()                    { *m = GetAboutRequest{} }
func (m *GetAboutRequest) String() string            { return proto.CompactTextString(m) }
func (*GetAboutRequest) ProtoMessage()               {}
func (*GetAboutRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *GetAboutRequest) GetSiteId() uint64 {
	if m != nil {
		return m.SiteId
	}
	return 0
}

type GetAboutReply struct {
	Content string `protobuf:"bytes,1,opt,name=content" json:"content,omitempty"`
	Err     string `protobuf:"bytes,2,opt,name=err" json:"err,omitempty"`
}

func (m *GetAboutReply) Reset()                    { *m = GetAboutReply{} }
func (m *GetAboutReply) String() string            { return proto.CompactTextString(m) }
func (*GetAboutReply) ProtoMessage()               {}
func (*GetAboutReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *GetAboutReply) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *GetAboutReply) GetErr() string {
	if m != nil {
		return m.Err
	}
	return ""
}

func init() {
	proto.RegisterType((*CreateNewSiteRequest)(nil), "pb.CreateNewSiteRequest")
	proto.RegisterType((*CreateNewSiteReply)(nil), "pb.CreateNewSiteReply")
	proto.RegisterType((*ProxyDeleteSiteRequest)(nil), "pb.ProxyDeleteSiteRequest")
	proto.RegisterType((*ProxyDeleteSiteReply)(nil), "pb.ProxyDeleteSiteReply")
	proto.RegisterType((*CheckSitenameExistsRequest)(nil), "pb.CheckSitenameExistsRequest")
	proto.RegisterType((*CheckSitenameExistsReply)(nil), "pb.CheckSitenameExistsReply")
	proto.RegisterType((*GetSiteIDByUserIDRequest)(nil), "pb.GetSiteIDByUserIDRequest")
	proto.RegisterType((*GetSiteIDByUserIDReply)(nil), "pb.GetSiteIDByUserIDReply")
	proto.RegisterType((*GetConfigRequest)(nil), "pb.GetConfigRequest")
	proto.RegisterType((*GetConfigReply)(nil), "pb.GetConfigReply")
	proto.RegisterType((*UpdateConfigRequest)(nil), "pb.UpdateConfigRequest")
	proto.RegisterType((*UpdateConfigReply)(nil), "pb.UpdateConfigReply")
	proto.RegisterType((*GetThemesRequest)(nil), "pb.GetThemesRequest")
	proto.RegisterType((*GetThemesReply)(nil), "pb.GetThemesReply")
	proto.RegisterType((*UpdateSiteThemeRequest)(nil), "pb.UpdateSiteThemeRequest")
	proto.RegisterType((*UpdateSiteThemeReply)(nil), "pb.UpdateSiteThemeReply")
	proto.RegisterType((*PostAboutRequest)(nil), "pb.PostAboutRequest")
	proto.RegisterType((*PostAboutReply)(nil), "pb.PostAboutReply")
	proto.RegisterType((*GetAboutRequest)(nil), "pb.GetAboutRequest")
	proto.RegisterType((*GetAboutReply)(nil), "pb.GetAboutReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Sitemgr service

type SitemgrClient interface {
	NewSite(ctx context.Context, in *CreateNewSiteRequest, opts ...grpc.CallOption) (*CreateNewSiteReply, error)
	DeleteSite(ctx context.Context, in *ProxyDeleteSiteRequest, opts ...grpc.CallOption) (*ProxyDeleteSiteReply, error)
	CheckSitenameExists(ctx context.Context, in *CheckSitenameExistsRequest, opts ...grpc.CallOption) (*CheckSitenameExistsReply, error)
	GetSiteIDByUserID(ctx context.Context, in *GetSiteIDByUserIDRequest, opts ...grpc.CallOption) (*GetSiteIDByUserIDReply, error)
	GetConfig(ctx context.Context, in *GetConfigRequest, opts ...grpc.CallOption) (*GetConfigReply, error)
	UpdateConfig(ctx context.Context, in *UpdateConfigRequest, opts ...grpc.CallOption) (*UpdateConfigReply, error)
	GetThemes(ctx context.Context, in *GetThemesRequest, opts ...grpc.CallOption) (*GetThemesReply, error)
	UpdateSiteTheme(ctx context.Context, in *UpdateSiteThemeRequest, opts ...grpc.CallOption) (*UpdateSiteThemeReply, error)
	PostAbout(ctx context.Context, in *PostAboutRequest, opts ...grpc.CallOption) (*PostAboutReply, error)
	GetAbout(ctx context.Context, in *GetAboutRequest, opts ...grpc.CallOption) (*GetAboutReply, error)
}

type sitemgrClient struct {
	cc *grpc.ClientConn
}

func NewSitemgrClient(cc *grpc.ClientConn) SitemgrClient {
	return &sitemgrClient{cc}
}

func (c *sitemgrClient) NewSite(ctx context.Context, in *CreateNewSiteRequest, opts ...grpc.CallOption) (*CreateNewSiteReply, error) {
	out := new(CreateNewSiteReply)
	err := grpc.Invoke(ctx, "/pb.Sitemgr/NewSite", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sitemgrClient) DeleteSite(ctx context.Context, in *ProxyDeleteSiteRequest, opts ...grpc.CallOption) (*ProxyDeleteSiteReply, error) {
	out := new(ProxyDeleteSiteReply)
	err := grpc.Invoke(ctx, "/pb.Sitemgr/DeleteSite", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sitemgrClient) CheckSitenameExists(ctx context.Context, in *CheckSitenameExistsRequest, opts ...grpc.CallOption) (*CheckSitenameExistsReply, error) {
	out := new(CheckSitenameExistsReply)
	err := grpc.Invoke(ctx, "/pb.Sitemgr/CheckSitenameExists", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sitemgrClient) GetSiteIDByUserID(ctx context.Context, in *GetSiteIDByUserIDRequest, opts ...grpc.CallOption) (*GetSiteIDByUserIDReply, error) {
	out := new(GetSiteIDByUserIDReply)
	err := grpc.Invoke(ctx, "/pb.Sitemgr/GetSiteIDByUserID", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sitemgrClient) GetConfig(ctx context.Context, in *GetConfigRequest, opts ...grpc.CallOption) (*GetConfigReply, error) {
	out := new(GetConfigReply)
	err := grpc.Invoke(ctx, "/pb.Sitemgr/GetConfig", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sitemgrClient) UpdateConfig(ctx context.Context, in *UpdateConfigRequest, opts ...grpc.CallOption) (*UpdateConfigReply, error) {
	out := new(UpdateConfigReply)
	err := grpc.Invoke(ctx, "/pb.Sitemgr/UpdateConfig", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sitemgrClient) GetThemes(ctx context.Context, in *GetThemesRequest, opts ...grpc.CallOption) (*GetThemesReply, error) {
	out := new(GetThemesReply)
	err := grpc.Invoke(ctx, "/pb.Sitemgr/GetThemes", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sitemgrClient) UpdateSiteTheme(ctx context.Context, in *UpdateSiteThemeRequest, opts ...grpc.CallOption) (*UpdateSiteThemeReply, error) {
	out := new(UpdateSiteThemeReply)
	err := grpc.Invoke(ctx, "/pb.Sitemgr/UpdateSiteTheme", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sitemgrClient) PostAbout(ctx context.Context, in *PostAboutRequest, opts ...grpc.CallOption) (*PostAboutReply, error) {
	out := new(PostAboutReply)
	err := grpc.Invoke(ctx, "/pb.Sitemgr/PostAbout", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sitemgrClient) GetAbout(ctx context.Context, in *GetAboutRequest, opts ...grpc.CallOption) (*GetAboutReply, error) {
	out := new(GetAboutReply)
	err := grpc.Invoke(ctx, "/pb.Sitemgr/GetAbout", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Sitemgr service

type SitemgrServer interface {
	NewSite(context.Context, *CreateNewSiteRequest) (*CreateNewSiteReply, error)
	DeleteSite(context.Context, *ProxyDeleteSiteRequest) (*ProxyDeleteSiteReply, error)
	CheckSitenameExists(context.Context, *CheckSitenameExistsRequest) (*CheckSitenameExistsReply, error)
	GetSiteIDByUserID(context.Context, *GetSiteIDByUserIDRequest) (*GetSiteIDByUserIDReply, error)
	GetConfig(context.Context, *GetConfigRequest) (*GetConfigReply, error)
	UpdateConfig(context.Context, *UpdateConfigRequest) (*UpdateConfigReply, error)
	GetThemes(context.Context, *GetThemesRequest) (*GetThemesReply, error)
	UpdateSiteTheme(context.Context, *UpdateSiteThemeRequest) (*UpdateSiteThemeReply, error)
	PostAbout(context.Context, *PostAboutRequest) (*PostAboutReply, error)
	GetAbout(context.Context, *GetAboutRequest) (*GetAboutReply, error)
}

func RegisterSitemgrServer(s *grpc.Server, srv SitemgrServer) {
	s.RegisterService(&_Sitemgr_serviceDesc, srv)
}

func _Sitemgr_NewSite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNewSiteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SitemgrServer).NewSite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Sitemgr/NewSite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SitemgrServer).NewSite(ctx, req.(*CreateNewSiteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sitemgr_DeleteSite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProxyDeleteSiteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SitemgrServer).DeleteSite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Sitemgr/DeleteSite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SitemgrServer).DeleteSite(ctx, req.(*ProxyDeleteSiteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sitemgr_CheckSitenameExists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckSitenameExistsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SitemgrServer).CheckSitenameExists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Sitemgr/CheckSitenameExists",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SitemgrServer).CheckSitenameExists(ctx, req.(*CheckSitenameExistsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sitemgr_GetSiteIDByUserID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSiteIDByUserIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SitemgrServer).GetSiteIDByUserID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Sitemgr/GetSiteIDByUserID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SitemgrServer).GetSiteIDByUserID(ctx, req.(*GetSiteIDByUserIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sitemgr_GetConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SitemgrServer).GetConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Sitemgr/GetConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SitemgrServer).GetConfig(ctx, req.(*GetConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sitemgr_UpdateConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SitemgrServer).UpdateConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Sitemgr/UpdateConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SitemgrServer).UpdateConfig(ctx, req.(*UpdateConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sitemgr_GetThemes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetThemesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SitemgrServer).GetThemes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Sitemgr/GetThemes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SitemgrServer).GetThemes(ctx, req.(*GetThemesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sitemgr_UpdateSiteTheme_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSiteThemeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SitemgrServer).UpdateSiteTheme(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Sitemgr/UpdateSiteTheme",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SitemgrServer).UpdateSiteTheme(ctx, req.(*UpdateSiteThemeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sitemgr_PostAbout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostAboutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SitemgrServer).PostAbout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Sitemgr/PostAbout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SitemgrServer).PostAbout(ctx, req.(*PostAboutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sitemgr_GetAbout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAboutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SitemgrServer).GetAbout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Sitemgr/GetAbout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SitemgrServer).GetAbout(ctx, req.(*GetAboutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Sitemgr_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Sitemgr",
	HandlerType: (*SitemgrServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NewSite",
			Handler:    _Sitemgr_NewSite_Handler,
		},
		{
			MethodName: "DeleteSite",
			Handler:    _Sitemgr_DeleteSite_Handler,
		},
		{
			MethodName: "CheckSitenameExists",
			Handler:    _Sitemgr_CheckSitenameExists_Handler,
		},
		{
			MethodName: "GetSiteIDByUserID",
			Handler:    _Sitemgr_GetSiteIDByUserID_Handler,
		},
		{
			MethodName: "GetConfig",
			Handler:    _Sitemgr_GetConfig_Handler,
		},
		{
			MethodName: "UpdateConfig",
			Handler:    _Sitemgr_UpdateConfig_Handler,
		},
		{
			MethodName: "GetThemes",
			Handler:    _Sitemgr_GetThemes_Handler,
		},
		{
			MethodName: "UpdateSiteTheme",
			Handler:    _Sitemgr_UpdateSiteTheme_Handler,
		},
		{
			MethodName: "PostAbout",
			Handler:    _Sitemgr_PostAbout_Handler,
		},
		{
			MethodName: "GetAbout",
			Handler:    _Sitemgr_GetAbout_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sitemgrsvc.proto",
}

func init() { proto.RegisterFile("sitemgrsvc.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 555 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x55, 0x6d, 0x8f, 0xd2, 0x40,
	0x10, 0x06, 0xf4, 0x80, 0x9b, 0xe8, 0x1d, 0x0c, 0xd8, 0x6b, 0x36, 0xc6, 0x98, 0x4d, 0x4c, 0x2e,
	0x9a, 0x90, 0x78, 0x9a, 0x68, 0x34, 0xc6, 0x17, 0x7a, 0x12, 0xbe, 0xe8, 0x05, 0xe4, 0xb3, 0xe1,
	0x65, 0xbc, 0x6b, 0x04, 0x5a, 0xdb, 0x3d, 0x85, 0xff, 0xe3, 0x0f, 0x35, 0xfb, 0x42, 0x69, 0xe9,
	0x36, 0xe0, 0x37, 0xa6, 0x33, 0xf3, 0x3c, 0xf3, 0xec, 0xee, 0x33, 0x40, 0x23, 0xf6, 0x05, 0x2d,
	0xae, 0xa3, 0xf8, 0xf7, 0xb4, 0x13, 0x46, 0x81, 0x08, 0xb0, 0x12, 0x4e, 0xf8, 0x05, 0xb4, 0xbb,
	0x11, 0x8d, 0x05, 0x7d, 0xa1, 0x3f, 0x43, 0x5f, 0xd0, 0x80, 0x7e, 0xdd, 0x52, 0x2c, 0x90, 0x41,
	0x5d, 0xd6, 0x2f, 0xc7, 0x0b, 0x72, 0xcb, 0x8f, 0xcb, 0xe7, 0xc7, 0x83, 0x24, 0xe6, 0xef, 0x01,
	0x77, 0x7a, 0xc2, 0xf9, 0x1a, 0xcf, 0xa0, 0x26, 0x2b, 0xbe, 0xfb, 0x33, 0xd5, 0x70, 0x77, 0x50,
	0x95, 0x61, 0x7f, 0x86, 0x0d, 0xb8, 0x43, 0x51, 0xe4, 0x56, 0x14, 0x8a, 0xfc, 0xc9, 0x9f, 0x83,
	0x73, 0x15, 0x05, 0xab, 0xb5, 0x47, 0x73, 0x12, 0x94, 0xa6, 0x2d, 0x02, 0xe1, 0xe7, 0xd0, 0xce,
	0xb5, 0x48, 0x56, 0x03, 0x5e, 0xde, 0x82, 0xbf, 0x06, 0xd6, 0xbd, 0xa1, 0xe9, 0xcf, 0xa1, 0x19,
	0xf7, 0x72, 0xe5, 0xc7, 0x22, 0x3e, 0x44, 0x97, 0x07, 0xae, 0xb5, 0x53, 0xf2, 0x38, 0x50, 0x25,
	0x15, 0xaa, 0xae, 0xfa, 0xc0, 0x44, 0x16, 0x71, 0x0c, 0xdc, 0x1e, 0x09, 0x89, 0xd1, 0xf7, 0x3e,
	0xad, 0x47, 0x31, 0x45, 0x7d, 0xcf, 0xb0, 0xf3, 0x2e, 0x38, 0x96, 0xdc, 0x7f, 0x9e, 0xde, 0x33,
	0x68, 0xf4, 0x48, 0x74, 0x83, 0xe5, 0x0f, 0xff, 0x7a, 0xef, 0xb9, 0xbd, 0x81, 0x93, 0x54, 0xb1,
	0x51, 0x32, 0x55, 0xa1, 0xd1, 0x6f, 0x22, 0x0b, 0xd1, 0x67, 0x68, 0x8d, 0xc2, 0xd9, 0x58, 0xd0,
	0x61, 0x5c, 0x29, 0xe4, 0x4a, 0x1a, 0x99, 0x3f, 0x81, 0x66, 0x16, 0xc7, 0x7e, 0x71, 0x5a, 0xd7,
	0xb7, 0x1b, 0x5a, 0x50, 0x7c, 0xa0, 0xae, 0x4d, 0xb1, 0xd1, 0x25, 0x54, 0xb8, 0xd1, 0xa5, 0x23,
	0x8b, 0xae, 0x1e, 0x38, 0x7a, 0x1e, 0x79, 0x11, 0x0a, 0x62, 0xaf, 0xb4, 0x36, 0x1c, 0x29, 0x38,
	0x03, 0xa3, 0x03, 0xf9, 0x28, 0x73, 0x40, 0x76, 0x6d, 0x97, 0xd0, 0xb8, 0x0a, 0x62, 0xf1, 0x71,
	0x12, 0xdc, 0x8a, 0xbd, 0x64, 0x2e, 0xd4, 0xa6, 0xc1, 0x52, 0xd0, 0x52, 0x18, 0xba, 0x4d, 0xc8,
	0x39, 0x9c, 0xa4, 0x60, 0xec, 0x54, 0x4f, 0xe1, 0xb4, 0x47, 0x87, 0x31, 0xf1, 0xb7, 0x70, 0x7f,
	0x5b, 0x2b, 0xe1, 0x52, 0xd4, 0xe5, 0x0c, 0x75, 0xfe, 0x18, 0x2f, 0xfe, 0x1e, 0x41, 0x6d, 0xa8,
	0x77, 0x0a, 0xbe, 0x83, 0x9a, 0x59, 0x06, 0xe8, 0x76, 0xc2, 0x49, 0xc7, 0xb6, 0x53, 0x98, 0x63,
	0xc9, 0x84, 0xf3, 0x35, 0x2f, 0xa1, 0x07, 0xb0, 0x35, 0x36, 0x32, 0x59, 0x67, 0x5f, 0x10, 0xcc,
	0xb5, 0xe6, 0x34, 0xca, 0x08, 0x5a, 0x16, 0xff, 0xe2, 0x23, 0x45, 0x5b, 0xb8, 0x12, 0xd8, 0xc3,
	0xc2, 0xbc, 0x86, 0xfd, 0x0a, 0xcd, 0x9c, 0x69, 0x51, 0x35, 0x15, 0xf9, 0x9c, 0xb1, 0x82, 0xac,
	0x06, 0x7c, 0x05, 0xc7, 0x89, 0x27, 0xb1, 0x6d, 0x4a, 0x33, 0x1e, 0x63, 0xb8, 0xf3, 0x55, 0x37,
	0x7e, 0x80, 0x7b, 0x69, 0x23, 0xe1, 0x99, 0xac, 0xb2, 0x58, 0x94, 0x3d, 0xc8, 0x27, 0xd2, 0xd4,
	0xda, 0x36, 0x09, 0x75, 0xc6, 0x72, 0x09, 0x75, 0xca, 0x5b, 0xbc, 0x84, 0x7d, 0x38, 0xdd, 0x79,
	0xea, 0xfa, 0x9a, 0xec, 0x46, 0xd2, 0xd7, 0x64, 0xf3, 0x86, 0x9e, 0x21, 0x79, 0xc4, 0x7a, 0x86,
	0x5d, 0x6b, 0xe8, 0x19, 0xb2, 0x2f, 0x9d, 0x97, 0xf0, 0x25, 0xd4, 0x37, 0xaf, 0x15, 0x5b, 0x66,
	0xca, 0x4c, 0x5b, 0x33, 0xfb, 0x51, 0x75, 0x4d, 0xaa, 0xea, 0xcf, 0xee, 0xc5, 0xbf, 0x00, 0x00,
	0x00, 0xff, 0xff, 0xb8, 0xbb, 0xba, 0x36, 0x00, 0x07, 0x00, 0x00,
}
